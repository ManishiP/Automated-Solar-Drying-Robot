#include <NMEAGPS.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_HMC5883_U.h>
#include <Servo.h>
#include <NewPing.h>
#include "DHT.h"

//bh1750
#define BH_1750F 0x23
#define BH_1750S 0x5C
#define DATA_REG_RESET 0b00000111
#define POWER_DOWN 0b00000000
#define POWER_ON 0b00000001


/* Assign a unique ID to this sensor at the same time */
Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(12345);

#define gpsPort Serial2

#define DHTPIN A0     // what pin we're connected to
#define DHTTYPE DHT22   // DHT 22  (AM2302)
DHT dht(DHTPIN, DHTTYPE);

////AKILA


const int LeftMotorForward = 7;
const int LeftMotorBackward = 6;
const int RightMotorForward = 5;
const int RightMotorBackward = 4;

#define trig A1
#define echo A2
#define Max_distance 200 // used to limit the distance range that the sensor will detect

bool goesForward = false ; // used to check whether the robot is currently moving forward
int distance = 100; // assigned to a default value 100.this will be updated with the actual vaue measured by the sensor

NewPing sonar(trig,echo,Max_distance); // create an instance of NewPIng class, named as sonar anf taken 3 arguments
Servo servo_motor; // instance of Servo class named as servo_motor
Servo servomotor1;//rainshield
Servo servomotor2;//rainshield

int LEDPIN1 = 32;
int limFlux = 20;
NMEAGPS gps;
gps_fix fix;
float latn;
float longn;
float templt;
float templg;

bool hasRain = false;
bool shieldOk = false;
int chk;
float hum;  //Stores humidity value
bool cloud = false;


//BH1750 codes
enum BH1750Mode {
  CHM = 0b00010000,     //CHM: Continuously H-Resolution Mode
  CHM_2 = 0b00010001,   //CHM_2: Continuously H-Resolution Mode2
  CLM = 0b00010011,     //CLM: Continuously L-Resolution Mode
  OTH = 0b00100000,     //OTH: One Time H-Resolution Mode
  OTH_2 = 0b00100001,   //OTH_2: One Time H-Resolution Mode2
  OTL = 0b00100011      //OTL: One Time L-Resolution Mode
} mode;
float measuringTimeFactor ;


void setup(){
  // put your setup code here, to run once:
  Wire.begin();
  mode = CHM;
  measuringTimeFactor = 1;
  setMode();
  setMeasuringTime(); 
  delay(200);

  pinMode(LeftMotorForward,OUTPUT);
  pinMode(LeftMotorBackward,OUTPUT);
  pinMode(RightMotorForward,OUTPUT);
  pinMode(RightMotorBackward,OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);

  analogWrite(10, 180);
  analogWrite(11, 180);

  
  servo_motor.attach(9);//attached pin of servo motr for ultrasonic
  servo_motor.write(110);//initial position of the servo motor

  servomotor1.attach(26);//rainshield
  servomotor2.attach(28);
  servomotor1.write(0);
  servomotor2.write(180);

  delay(2000);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);

  Serial.begin(9600);
  dht.begin();

  sensor_t sensor;
  mag.getSensor(&sensor);
}

void loop(){
  // put your main code here, to run repeatedly:
  //Serial.println(getlux());
  //Serial.println(getluxS());

  limFlux = lightCon();
  Serial.println(limFlux);

  while (isRain()== false){  
    if (isShady() == true){
      Serial.println(isShady());
      selfDrive();
    }
  }
  Serial.println("Exit");

  if (shieldOk == false){
    Serial.println("Shield On");
    shieldAct();
    delay(3000);
    //pathFind();
  }
}

float Heading(){
  sensors_event_t event; 
  mag.getEvent(&event);

  float heading = atan2(event.magnetic.y, event.magnetic.x);
  float declinationAngle = 0.22;
  heading += declinationAngle;

  if(heading < 0){
    heading += 2*PI;
  } 
  // Check for wrap due to addition of declination.
  if(heading > 2*PI){
    heading -= 2*PI;
  }
  // Convert radians to degrees for readability.
  float headingDegrees = heading * 180/M_PI; 
  return headingDegrees;
}


void pathFind(){
  int lmn = 0;
        
  while(lmn==0){
    if (gps.available( gpsPort )) {
      fix = gps.read();

      templt = fix.latitude(); // positive for N, negative for S
      templg = fix.longitude(); // positive for E, negative for W

      if (latn>5.5 && latn<8){
        lmn = 1;
      }
    }
  }

  float dir = atan2((latn - templt),(longn-templg));
  dir = dir*180/M_PI;
  float difdir = dir - Heading();

  if (difdir <5 && difdir>-5){
    moveForward();
  } else if (difdir>5){
    turnRight();
  } else if (difdir<-5){
    turnLeft();
  }
  // has to be developed
}

float getFlux(){ // not needed
  float pr;

  float st = getlux();
  float uv = getluxS();

  pr = st/2+uv/2; //#################
  return pr; 
}


bool isShady(){
  limFlux = lightCon();
  Serial.println(limFlux);

  float xy = getlux();
  delay(100);
  Serial.println(xy);
  float yz = getluxS();
  delay(100);
  int abc = 0;
  Serial.println(yz);

  if (xy >= limFlux and yz >= limFlux){
    return false;
  } else if (yz < limFlux){
    Serial.println("bb");
    delay(1000);
    xy = getlux();
    Serial.print(xy);
    if (xy >= limFlux && cloud == false){
      cloud = false;
      return true;
    }else{
      cloud = true;
      return false;
    }
  } else if (xy < limFlux){
    delay(1000);
    yz = getluxS();
    Serial.print(xy);
    if (yz >= limFlux && cloud == true){
      cloud = false;
      return true;
    }else{
      cloud = true;
      return false;
    }
  } else {
    return false;
  }
}

int lightCon(){
  int jk =  analogRead(A4)*10000/1023;
  return 5;
  return jk;
  //return 3;
}

float getHum(){
  hum = dht.readHumidity();
  delay(700);
  return hum;
}

bool isRain(){
  int val = analogRead(A5);
  float h = getHum();
  Serial.println(val);
  Serial.println(h);
  delay(100);


  if (val <800 || h > 95){ 
    Serial.println("Good");  // the value should be change
    return true;
  } else {
    Serial.println("Bad");
    return false;
  }

}

float getlux(){
  uint16_t rawLux;
  float lux;
  
  rawLux = readBH1750();
  if((mode==CHM_2)||(mode==OTH_2)){
    lux = (rawLux/2.4)/measuringTimeFactor;     
  }
  else{
    lux = (rawLux/1.2)/measuringTimeFactor;
  }
  
  return lux;
}

float getluxS(){
  uint16_t rawLuxS;
  float luxS;

  rawLuxS = readBH1750S();
  if((mode==CHM_2)||(mode==OTH_2)){
    luxS = (rawLuxS/2.4)/measuringTimeFactor;     
  }
  else{
    luxS = (rawLuxS/1.2)/measuringTimeFactor;
  }

  return luxS;
}


void shieldAct(){
  for (int i=0; i<180; i++){
    servomotor1.write(i);
    servomotor2.write(180-i);
    delay(5);
  }

  shieldOk = true;
}

void shieldDct(){
  for (int i=180; i>=0; i--){
    servomotor1.write(i);
    servomotor2.write(180-i);
    delay(20);
  }
}


////AKILA Self drive
int lookRight(){
  int distaance = 0;
  for (int p = 110; p >= 50; p = p-10){
    servo_motor.write(p);
    delay(100);
    int mes = readPing();
    delay(400);
    distaance += mes;
  }
//     if (distance < min){
//       min = distance;
//     }
//   }
//   servo_motor.write(110);
//   return min;
//   delay(100);
// }
  //servo_motor.write(50);
  //delay(100);
  //int distaance = readPing();
  //delay(100);

  servo_motor.write(110);
  delay(200);
  return distaance;
}

int lookLeft(){
  int distaance = 0;
  for (int p = 110; p <= 170; p = p+10){
    servo_motor.write(p);
    delay(100);
    int mes = readPing();
    delay(400);
    distaance += mes;
  }
  //   if (distance < min){
  //     min = distance;
  //   }
  // }
  // servo_motor.write(110);
  // return min;
  // delay(100);
  //servo_motor.write(170);
  //delay(100);
  //int distaance = readPing();
  //delay(100);

  servo_motor.write(110);
  delay(200);
  return distaance;
}

int readPing(){
  delay(200);
  int cm = sonar.ping_cm();
  if (cm ==0){
    cm = 1;
  }
  return cm;
}

void moveStop(){
  digitalWrite(RightMotorForward, LOW);
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorBackward, LOW);
  digitalWrite(LeftMotorBackward, LOW);
  goesForward = false;
}

void moveForward(){
  if (!goesForward){
    goesForward = true;
    digitalWrite(RightMotorForward, LOW);
    digitalWrite(LeftMotorForward, LOW);
    digitalWrite(RightMotorBackward, HIGH);
    digitalWrite(LeftMotorBackward, HIGH);  
  }

}

void moveBackward(){
  goesForward = false;
  digitalWrite(RightMotorForward, HIGH);
  digitalWrite(LeftMotorForward, HIGH);
  digitalWrite(RightMotorBackward, LOW);
  digitalWrite(LeftMotorBackward, LOW);
}

void turnRight(){
  analogWrite(10, 255);
  analogWrite(11, 255);
  digitalWrite(LeftMotorForward, HIGH);
  digitalWrite(RightMotorBackward, HIGH);
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorForward, LOW);
  
  delay(2000);

  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorBackward, LOW);
  digitalWrite(RightMotorForward, HIGH);
  digitalWrite(LeftMotorForward, HIGH);
  
  analogWrite(10, 180);
  analogWrite(11, 180);

}


void turnLeft(){
  analogWrite(10, 255);
  analogWrite(11, 255);
  digitalWrite(RightMotorForward, HIGH);
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorBackward, LOW);
  digitalWrite(LeftMotorBackward, HIGH);
  
  delay(2000);

  digitalWrite(RightMotorForward, HIGH);
  digitalWrite(LeftMotorForward, HIGH);
  digitalWrite(RightMotorBackward, LOW);
  digitalWrite(LeftMotorBackward, LOW);
  analogWrite(10, 180);
  analogWrite(11, 180);

}


void selfDrive(){
  unsigned long start_time = millis(); // unsigned long store 32 bits long positive numbers
  //millis() returns the number of milliseconds passsed since the arduino board began running the current program
  
  //Loop for 2 s
  while (millis() - start_time < 5000){ //millis() here gives the total time since the code started and start_time is the time
    // at the point the timer started
    Serial.println(millis()-start_time);
    int Distance_Right= 0;
    int Distance_Left =0;
    Serial.println(distance);

    if (distance <=35){
      start_time += 5000;
      moveStop();
      delay(300);
      moveBackward();
      delay(400);
      moveStop();
      delay(400);
      Distance_Right = lookRight();
      Serial.println(Distance_Right);
      delay(300);
      Distance_Left = lookLeft();
      Serial.println(Distance_Left);
      delay(300);
      
      if (Distance_Right>=Distance_Left){
        Serial.println("turn right");
        turnRight();
        moveStop();
      }
      else{
        Serial.println("turn left");
        turnLeft();
        moveStop();
      }
    }
    else{
      moveForward();
    }

    distance=readPing(); 
  }

  distance = readPing();
  moveStop();

}


void powerDown(){
  writeBH1750(POWER_DOWN);
  writeBH1750S(POWER_DOWN);
}
void powerOn(){
  writeBH1750(POWER_ON);
  writeBH1750S(POWER_ON);
  setMode();
}
void dataRegReset(){
  writeBH1750(DATA_REG_RESET);
  writeBH1750S(DATA_REG_RESET);
}
void setMode(){
  writeBH1750(mode);
  writeBH1750S(mode);
}
void setMeasuringTime(){
  byte mt = round(measuringTimeFactor*69);
  byte highByteMT = ((mt>>5) | 0b01000000);
  byte lowByteMT = (mt & 0b01111111);
  lowByteMT |= 0b01100000;
  writeBH1750(highByteMT);
  writeBH1750(lowByteMT);
  writeBH1750S(highByteMT);
  writeBH1750S(lowByteMT);
}
uint16_t readBH1750(){
  uint8_t MSbyte, LSbyte;
  Wire.requestFrom(BH_1750F, 2);
  if(Wire.available()){
    MSbyte=Wire.read();
    LSbyte=Wire.read(); 
  }
  return ((MSbyte<<8) + LSbyte);
}
void writeBH1750(byte val){
  Wire.beginTransmission(BH_1750F);
  Wire.write(val);
  Wire.endTransmission();
}
uint16_t readBH1750S(){
  uint8_t MSbyte, LSbyte;
  Wire.requestFrom(BH_1750S, 2);
  if(Wire.available()){
    MSbyte=Wire.read();
    LSbyte=Wire.read(); 
  }
  return ((MSbyte<<8) + LSbyte);
}
void writeBH1750S(byte val){
  Wire.beginTransmission(BH_1750S);
  Wire.write(val);
  Wire.endTransmission();
}
